
/*** common types ***/
typedef string swid_t;
typedef string portid_t;
typedef tuple<swid_t, portid_t> swport_t;


/*** path type definition ***/
enum path_mode {
    ANY,  // forward to one of the dst swport
    ALL   // multicast to all of the dst swport
}

/** defines forward behaivor of switch, when pkt comes from src, send pkt to dst according to path_mode **/
struct path_ele_t {
    path_mode mode;
    set<swport_t> src;
    set<swport_t> dst;
}

typedef list<path_ele_t> path_t;

typedef list<swport_t> single_path_t;
typedef path_t multi_path_t;

/** extern object for parser **/
extern packet_in {

    void extract<T>(out T hdr);

    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);

    T lookahead<T>();
    void advance(in bit<32> sizeInBits);
    bit<32> length();
}

/***** packet structure *****/
struct packet_t<H, M> {
    H hdr;
    M meta;
    swport_t ingress_swport;        // ingress switch and port
    path_t  egress_path;            // the egress forwarding path
    action_t egress_path_action_each;    // the forward action exec on each node when forwarding along egress_path
    action_t egress_path_action_once;    // the forward action exec once when forwarding along egress_path
    bit<32> packet_length;
}


/** core extern functions, bellow should be implement by magellan compiler **/
extern swport_t peer(swport_t swport);
extern bit<32> ip2int(in string ip);
extern bit<48> mac2int(in string mac);