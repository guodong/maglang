// ISSUES:
// TODO: what is our programming model/switch model/program logic
//
// TODO: p4 model has 3 components: ingress, queue, egress; what is magellan model?
//
// 1. handle path action order
// 2. egress port cannot get by set structure
#include <core.mag>
#include <headers.mag>
#incluee <parser.mag>

/** extern functions, impleneted in external codes **/
extern path_t shortest_path(swport_t src, swpport_t dst);

/** global data structures **/
/** these could be set by another function, but finally it must has value as following **/
map<ip4Addr_t, swport_t> ip_to_swport;
map<ip4Addr_t, macAddr_t> ipv4_to_mac;

// ingress pipeline
path_control ip(inout packet_t<headers_t, metadata_t> pkt) {
    auto path = shortest_path(pkt.ingress_swport, ip_to_swport[pkt.hdr.ipv4.dst]);
    pkt.egress_path = path;
}

// transmition pipeline
processing_block dec_ttl(inout packet_t<headers_t, metadata_t> pkt, in tm_t tm) {
    pkt.hdr.ipv4.ttl--;
}

processing_block rewrite_mac(inout packet_t<headers_t, metadata_t> pkt, in tm_t tm) {
    // rewrite mac at last hop
    pkt.hdr.ethernet.dstAddr = ipv4_to_mac[pkt.hdr.ipv4.dst];
}

label 'external_ingress' {
    parser=MyParser,
    path_control=ip,
    packet_processing_rule=([dec_ttl]*, [dec_ttl & rewrite_mac])
}

/*
TODO:
    programming model
    fboss use case
    compiler
    * incremental depoloyment
    * fault tolerance
    * scaling
    what's new/cool things can be done by magellan
    debugger api support reliablity

    completeness - arp dhcp ipv4/6 lldp
    fault tolerance, how to handle fast reroute
    scaling

non directional feedback
path_control -> tree, route_builder
fix name packet_processing_rule

requirements:
    first, second, second last, last, specific index
    once anywhere, all
    specific device(type)
    issue to think about: at least/most once, exact once










label 'external_ingress' {
    frontpipe {
        auto dst_id = ip_to_dstid.lpm(pkt.hdr.ipv4.dst)
        pkt.hdr.myTunnel.dst_id = dst_id;
        pkt.hdr.myTunnel.setValid();
        auto path = shortest_path(pkt.ingress_swport, dstid_to_swport[dst_id]);
        pkt.egress_path = fwd_action;
    }
    // ingress is ambiguous, if inst depends on ingress_swport, queue or egress_port, inst must be put at egress pipe
    transpipe {
        pkt.hdr.ipv4.ttl--;
        if (hdr.ipv4.ecn == 1 || hdr.ipv4.ecn == 2){
            if (switch_meta.enq_qdepth >= ECN_THRESHOLD){
                hdr.ipv4.ecn = 3;
            }
        }
        if (idx == pkt.egress_path.size() - 1) {
            pkt.hdr.myTunnel.setInvalid();
            pkt.hdr.ethernet.dstAddr = ipv4_to_mac[pkt.hdr.ipv4.dst];
        }
    }
}

