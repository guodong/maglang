#include <core.mag>
#include <headers.mag>
#incluee <parser.mag>

extern path_t shortest_path(swport_t src, swpport_t dst);

/** global data structures **/
/** these could be set by another function, but finally it must has value as following **/
map<ip4Addr_t, bit<16>> ip_to_dstid = { // todo: mask
    ip2int('10.0.1.1'): 1,
    ip2int('10.0.2.2'): 2,
    ip2int('10.0.3.3'): 3,
};
map<bit<16>, swport_t> dstid_to_swport = {
    1: ('h1', 'eth0'),
    2: ('h2', 'eth0'),
    3: ('h3', 'eth0')
};
map<ip4Addr_t, macAddr_t> ipv4_to_mac = {
    ip2int('10.0.1.1'): mac2int('08:00:00:00:01:11'),
    ip2int('10.0.2.2'): mac2int('08:00:00:00:02:22'),
    ip2int('10.0.3.3'): mac2int('08:00:00:00:03:33')
}
map<swid_t, list<portid_t>> external_ports = {
    's1': ['p1'],
    's2': ['p1'],
    's3': ['p1']
};

action fwd_action(inout headers_t hdr, in path_ele_t path_ele, in switch_meta_t switch_meta) {
    hdr.ipv4.ttl--;
    swid_t current_switchid = path_ele.sw;
    if (exeternal_ports[current_switchid].contains(path_ele.dst[0])) {
        pkt.hdr.myTunnel.setInvalid()
        pkt.hdr.ethernet.dstAddr = ipv4_to_mac[pkt.hdr.ipv4.dst];
    }
}

@label('external_ingress')
void on_pkt(inout packet_t<headers_t, metadata_t> pkt) {
    auto dst_id = ip_to_dstid.lpm(pkt.hdr.ipv4.dst)
    pkt.hdr.myTunnel.dst_id = dst_id;
    pkt.hdr.myTunnel.setValid();
    auto path = shortest_path(pkt.ingress_swport, dstid_to_swport[dst_id]);

    // TODO: consider functional language
    path.forEach(function(path_ele_t path_ele) { fwd_action(pkt.hdr, path_ele, meata);})
    pkt.egress_path_action_each = fwd_action;
}